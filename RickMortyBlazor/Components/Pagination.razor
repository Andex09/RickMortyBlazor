
<nav>
    <ul class="pagination justify-content-center flex-wrap pagination-sm">
        @foreach (var item in _paginationButtons)
        {
            <li @onclick="() => OnSelectedPage(item)"
                style="cursor:pointer"
                class="page-item bg-black
                @(item.Enabled ? null : "disabled")
                @(item.Active ? "active" : null) ">


                <span class="page-link" href="#">@item.Text</span>
            </li>
        }
    </ul>
</nav>


@code {

    private List<PaginationButton> _paginationButtons;

    [Parameter]
    public PaginationMetadata Metadata { get; set; }

    [Parameter]
    public EventCallback<int> SelectedPage { get; set; }

    [Parameter]
    public int Spread { get; set; }

    protected override void OnParametersSet()
    {
        CreatePaginationButtons();
    }

    private void CreatePaginationButtons()
    {
        _paginationButtons = new List<PaginationButton>();
        _paginationButtons.Add(new PaginationButton(
                                                Metadata.CurrentPage - 1,
                                                Metadata.HasPrevious,
                                                "Previous"));
        if (Metadata.CurrentPage - Spread > 0)
            _paginationButtons.Add(new PaginationButton(0, false, "..."));

        @for (int idx = 1; idx <= Metadata.TotalPages; idx++)
        {
            if (idx >= Metadata.CurrentPage - Spread && idx <= Metadata.CurrentPage + Spread)
            {
                _paginationButtons.Add(
                    new PaginationButton(idx, true, idx.ToString())
                        {
                            Active = Metadata.CurrentPage == idx
                        });
            }
        }
        if (Metadata.CurrentPage + Spread < Metadata.TotalPages)
            _paginationButtons.Add(new PaginationButton(0, false, "..."));

        _paginationButtons.Add(new PaginationButton(
                                                Metadata.CurrentPage + 1,
                                                Metadata.HasNext,
                                                "Next"));
    }

    private async Task OnSelectedPage(PaginationButton button)
    {
        if (button.Page == Metadata.CurrentPage || !button.Enabled)
            return;

        Metadata.CurrentPage = button.Page;
        await SelectedPage.InvokeAsync(button.Page);
    }
}
